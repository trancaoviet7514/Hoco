plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

repositories {
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-releases/"
    }
}

android {
    signingConfigs {
        release {
            storeFile file('/home/lap13626/Downloads/Hoco/app/releasekey2.jks')
            storePassword '123123'
            keyAlias 'key1'
            keyPassword '123123'
        }
    }
    compileSdkVersion 28
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.hovi.hoco"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug

        buildConfigField "String", "BUILD_TIME", '"' + getDate() + '"'
        buildConfigField "String", "GIT_BRANCH", '"' + getGitCurrentBranch() + '"'
    }

    buildTypes {
        debug {
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "BUILD_TIME", '"' + getDate() + '"'
            buildConfigField "String", "GIT_BRANCH", '"' + getGitCurrentBranch() + '"'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date();
            def formattedDate = date.format('ddMMyy_HHmm')
            def gitBranch = getGitCurrentBranch().replace("/", "_")

            def newApkName
            if (variant.buildType.name == "debug") {
                newApkName = "hoco_${gitBranch}"
            } else {
                newApkName = "hoco_release_${variant.versionName}"
            }

            newApkName += "_${formattedDate}.apk"
            outputFileName = new File(newApkName)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation('org.eclipse.paho:org.eclipse.paho.android.service:1.0.2') {
        exclude module: 'support-v4'
    }

    implementation 'com.android.support:localbroadcastmanager:28.0.0'

    implementation platform('com.google.firebase:firebase-bom:26.2.0')
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth:20.0.1'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.firebase:firebase-database-ktx'

    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation project(':passcodeview')

    compile 'com.github.bumptech.glide:glide:3.7.0'
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy/MM/dd HH:mm:ss')
    return formattedDate
}

static def getGitCurrentBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}
